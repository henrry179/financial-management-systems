version: '3.8'

services:
  # PostgreSQL 数据库 - 使用稳定版本
  postgres:
    image: postgres:15-alpine
    container_name: financial-postgres
    environment:
      - POSTGRES_DB=financial_db
      - POSTGRES_USER=financial_user
      - POSTGRES_PASSWORD=financial_password
      - POSTGRES_INITDB_ARGS=--encoding=UTF8 --lc-collate=C --lc-ctype=C
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ../database/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    networks:
      - financial-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U financial_user -d financial_db"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    restart: unless-stopped

  # Redis 缓存 - 使用稳定版本
  redis:
    image: redis:7-alpine
    container_name: financial-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes --bind 0.0.0.0
    networks:
      - financial-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 5s
      retries: 3
      start_period: 10s
    restart: unless-stopped

  # 后端服务
  backend:
    build:
      context: ../backend
      dockerfile: Dockerfile
      args:
        - NODE_ENV=development
    container_name: financial-backend
    ports:
      - "8000:8000"
    volumes:
      - ../backend:/app
      - /app/node_modules
    environment:
      - NODE_ENV=development
      - DATABASE_URL=postgresql://financial_user:financial_password@postgres:5432/financial_db
      - REDIS_URL=redis://redis:6379/0
      - JWT_SECRET=your-super-secret-jwt-key-change-this-in-production
      - PORT=8000
      - CORS_ORIGIN=http://localhost:3000
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - financial-network
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8000/health"]
      interval: 30s
      timeout: 15s
      retries: 3
      start_period: 60s
    restart: unless-stopped

  # 前端服务
  frontend:
    build:
      context: ../frontend
      dockerfile: Dockerfile
      args:
        - VITE_API_URL=http://localhost:8000
        - VITE_API_VERSION=v1
    container_name: financial-frontend
    ports:
      - "3000:3000"
    volumes:
      - ../frontend:/app
      - /app/node_modules
    environment:
      - NODE_ENV=development
      - VITE_API_URL=http://localhost:8000
      - VITE_API_VERSION=v1
    depends_on:
      backend:
        condition: service_healthy
    networks:
      - financial-network
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:3000"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    restart: unless-stopped

  # pgAdmin 数据库管理
  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: financial-pgadmin
    environment:
      - PGADMIN_DEFAULT_EMAIL=admin@financial.com
      - PGADMIN_DEFAULT_PASSWORD=admin123456
      - PGADMIN_CONFIG_SERVER_MODE=False
      - PGADMIN_CONFIG_MASTER_PASSWORD_REQUIRED=False
    ports:
      - "5050:80"
    volumes:
      - pgadmin_data:/var/lib/pgadmin
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - financial-network
    restart: unless-stopped

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  pgadmin_data:
    driver: local

networks:
  financial-network:
    driver: bridge
    ipam:
      driver: default
      config:
        - subnet: 172.20.0.0/16 