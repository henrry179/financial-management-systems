// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// 用户表
model User {
  id          String   @id @default(uuid())
  email       String   @unique
  username    String   @unique
  password    String
  firstName   String?
  lastName    String?
  avatar      String?
  phone       String?
  dateOfBirth DateTime?
  isActive    Boolean  @default(true)
  isVerified  Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // 关联关系
  accounts     Account[]
  transactions Transaction[]
  categories   Category[]
  budgets      Budget[]
  reports      Report[]
  settings     UserSetting[]

  @@map("users")
}

// 用户设置表
model UserSetting {
  id       String @id @default(uuid())
  userId   String
  key      String
  value    String
  category String @default("general")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, key])
  @@map("user_settings")
}

// 账户表
model Account {
  id            String      @id @default(uuid())
  userId        String
  name          String
  type          AccountType
  balance       Decimal     @default(0)
  currency      String      @default("CNY")
  description   String?
  bankName      String?
  accountNumber String?
  isActive      Boolean     @default(true)
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt

  // 关联关系
  user               User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  fromTransactions   Transaction[] @relation("FromAccount")
  toTransactions     Transaction[] @relation("ToAccount")
  budgetAllocations  Budget[]

  @@map("accounts")
}

// 账户类型枚举
enum AccountType {
  CASH        // 现金
  SAVINGS     // 储蓄账户
  CHECKING    // 支票账户
  CREDIT_CARD // 信用卡
  INVESTMENT  // 投资账户
  LOAN        // 贷款账户
}

// 分类表
model Category {
  id          String       @id @default(uuid())
  userId      String
  name        String
  type        CategoryType
  color       String?
  icon        String?
  parentId    String?
  description String?
  isActive    Boolean      @default(true)
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt

  // 关联关系
  user         User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  parent       Category?     @relation("CategoryParent", fields: [parentId], references: [id])
  children     Category[]    @relation("CategoryParent")
  transactions Transaction[]

  @@unique([userId, name])
  @@map("categories")
}

// 分类类型枚举
enum CategoryType {
  INCOME  // 收入
  EXPENSE // 支出
}

// 交易记录表
model Transaction {
  id          String          @id @default(uuid())
  userId      String
  fromAccountId String?
  toAccountId   String?
  categoryId    String?
  amount        Decimal
  type          TransactionType
  description   String?
  notes         String?
  tags          String[]
  date          DateTime
  location      String?
  attachments   String[]
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt

  // 关联关系
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  fromAccount Account?  @relation("FromAccount", fields: [fromAccountId], references: [id])
  toAccount   Account?  @relation("ToAccount", fields: [toAccountId], references: [id])
  category    Category? @relation(fields: [categoryId], references: [id])

  @@map("transactions")
}

// 交易类型枚举
enum TransactionType {
  INCOME   // 收入
  EXPENSE  // 支出
  TRANSFER // 转账
}

// 预算表
model Budget {
  id          String     @id @default(uuid())
  userId      String
  accountId   String?
  name        String
  amount      Decimal
  spent       Decimal    @default(0)
  period      BudgetPeriod
  startDate   DateTime
  endDate     DateTime
  isActive    Boolean    @default(true)
  alertThreshold Decimal? @default(0.8)
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  // 关联关系
  user    User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  account Account? @relation(fields: [accountId], references: [id])

  @@map("budgets")
}

// 预算周期枚举
enum BudgetPeriod {
  DAILY
  WEEKLY
  MONTHLY
  QUARTERLY
  YEARLY
}

// 报告表
model Report {
  id          String     @id @default(uuid())
  userId      String
  title       String
  type        ReportType
  parameters  Json       // 报告参数配置
  data        Json       // 报告数据
  generatedAt DateTime   @default(now())
  period      String     // 报告周期 (如: 2024-01, 2024-Q1)
  format      String     @default("JSON") // JSON, PDF, EXCEL
  filePath    String?    // 文件存储路径
  isPublic    Boolean    @default(false)

  // 关联关系
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("reports")
}

// 报告类型枚举
enum ReportType {
  MONTHLY_SUMMARY    // 月度总结
  EXPENSE_ANALYSIS   // 支出分析
  INCOME_ANALYSIS    // 收入分析
  BUDGET_PERFORMANCE // 预算执行
  TREND_ANALYSIS     // 趋势分析
  CUSTOM            // 自定义报告
}

// 系统通知表
model Notification {
  id        String           @id @default(uuid())
  userId    String?
  title     String
  content   String
  type      NotificationType
  priority  NotificationPriority @default(NORMAL)
  isRead    Boolean          @default(false)
  data      Json?            // 额外数据
  createdAt DateTime         @default(now())

  @@map("notifications")
}

// 通知类型枚举
enum NotificationType {
  BUDGET_ALERT    // 预算警告
  PAYMENT_REMINDER // 付款提醒
  REPORT_READY    // 报告就绪
  SYSTEM_UPDATE   // 系统更新
  SECURITY_ALERT  // 安全警告
}

// 通知优先级枚举
enum NotificationPriority {
  LOW
  NORMAL
  HIGH
  URGENT
}

// 系统配置表
model SystemConfig {
  id          String   @id @default(uuid())
  key         String   @unique
  value       String
  description String?
  category    String   @default("general")
  isEditable  Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("system_configs")
} 