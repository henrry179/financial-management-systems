// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

// 用户表
model User {
  id          String   @id @default(uuid())
  email       String   @unique
  username    String   @unique
  password    String
  firstName   String?
  lastName    String?
  avatar      String?
  phone       String?
  dateOfBirth DateTime?
  isActive    Boolean  @default(true)
  isVerified  Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // 关联关系
  accounts     Account[]
  transactions Transaction[]
  categories   Category[]
  budgets      Budget[]
  reports      Report[]
  settings     UserSetting[]
  claudeMemories ClaudeMemory[]
  claudeSessions ClaudeSession[]
  claudeMessages ClaudeMessage[]
  claudePreferences ClaudePreference[]

  @@map("users")
}

// 用户设置表
model UserSetting {
  id       String @id @default(uuid())
  userId   String
  key      String
  value    String
  category String @default("general")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, key])
  @@map("user_settings")
}

// 账户表
model Account {
  id            String      @id @default(uuid())
  userId        String
  name          String
  type          String      // 使用String代替AccountType枚举
  balance       Decimal     @default(0)
  currency      String      @default("CNY")
  description   String?
  bankName      String?
  accountNumber String?
  isActive      Boolean     @default(true)
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt

  // 关联关系
  user               User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  fromTransactions   Transaction[] @relation("FromAccount")
  toTransactions     Transaction[] @relation("ToAccount")
  budgetAllocations  Budget[]

  @@map("accounts")
}

// 分类表
model Category {
  id          String       @id @default(uuid())
  userId      String
  name        String
  type        String       // 使用String代替CategoryType枚举
  color       String?
  icon        String?
  parentId    String?
  description String?
  isActive    Boolean      @default(true)
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt

  // 关联关系
  user         User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  parent       Category?     @relation("CategoryParent", fields: [parentId], references: [id])
  children     Category[]    @relation("CategoryParent")
  transactions Transaction[]

  @@unique([userId, name])
  @@map("categories")
}

// 交易记录表
model Transaction {
  id          String          @id @default(uuid())
  userId      String
  fromAccountId String?
  toAccountId   String?
  categoryId    String?
  amount        Decimal
  type          String          // 使用String代替TransactionType枚举
  description   String?
  notes         String?
  tags          String?         // 标签数组，存储为 JSON 字符串
  date          DateTime
  location      String?
  attachments   String?         // 附件数组，存储为 JSON 字符串
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt

  // 关联关系
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  fromAccount Account?  @relation("FromAccount", fields: [fromAccountId], references: [id])
  toAccount   Account?  @relation("ToAccount", fields: [toAccountId], references: [id])
  category    Category? @relation(fields: [categoryId], references: [id])

  @@map("transactions")
}

// 预算表
model Budget {
  id          String     @id @default(uuid())
  userId      String
  accountId   String?
  name        String
  amount      Decimal
  spent       Decimal    @default(0)
  period      String     // 使用String代替BudgetPeriod枚举
  startDate   DateTime
  endDate     DateTime
  isActive    Boolean    @default(true)
  alertThreshold Decimal? @default(0.8)
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  // 关联关系
  user    User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  account Account? @relation(fields: [accountId], references: [id])

  @@map("budgets")
}

// 报告表
model Report {
  id          String     @id @default(uuid())
  userId      String
  title       String
  type        String     // 使用String代替ReportType枚举
  parameters  String     // 报告参数配置，存储为 JSON 字符串
  data        String     // 报告数据，存储为 JSON 字符串
  generatedAt DateTime   @default(now())
  period      String     // 报告周期 (如: 2024-01, 2024-Q1)
  format      String     @default("JSON") // JSON, PDF, EXCEL
  filePath    String?    // 文件存储路径
  isPublic    Boolean    @default(false)

  // 关联关系
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("reports")
}

// 系统通知表
model Notification {
  id        String           @id @default(uuid())
  userId    String?
  title     String
  content   String
  type      String           // 使用String代替NotificationType枚举
  priority  String           @default("NORMAL") // 使用String代替NotificationPriority枚举
  isRead    Boolean          @default(false)
  data      String?          // 额外数据，存储为 JSON 字符串
  createdAt DateTime         @default(now())

  @@map("notifications")
}

// 系统配置表
model SystemConfig {
  id          String   @id @default(uuid())
  key         String   @unique
  value       String
  description String?
  category    String   @default("general")
  isEditable  Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("system_configs")
}

// Claude记忆配置表
model ClaudeMemory {
  id           String   @id @default(uuid())
  userId       String
  sessionId    String?
  memoryType   String   // conversation, preference, context, task, personal
  key          String   // 记忆标识符
  title        String?  // 记忆标题
  content      String   // 记忆内容 (JSON格式)
  summary      String?  // 记忆摘要
  tags         String?  // 标签 (JSON数组)
  priority     Int      @default(1) // 优先级 1-5
  confidence   Float    @default(1.0) // 可信度 0.0-1.0
  accessCount  Int      @default(0) // 访问次数
  lastAccessed DateTime?
  isActive     Boolean  @default(true)
  expiresAt    DateTime?
  metadata     String?  // 元数据 (JSON格式)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  // 关联关系
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, key])
  @@index([userId, memoryType])
  @@index([userId, sessionId])
  @@map("claude_memories")
}

// Claude对话会话表
model ClaudeSession {
  id          String   @id @default(uuid())
  userId      String
  title       String?
  context     String?  // 会话上下文 (JSON格式)
  summary     String?  // 会话摘要
  messageCount Int     @default(0)
  isActive    Boolean  @default(true)
  lastMessageAt DateTime?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // 关联关系
  user     User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  messages ClaudeMessage[]

  @@index([userId, isActive])
  @@map("claude_sessions")
}

// Claude对话消息表
model ClaudeMessage {
  id        String   @id @default(uuid())
  sessionId String
  userId    String
  role      String   // user, assistant, system
  content   String   // 消息内容
  tokens    Int?     // 令牌数量
  model     String?  // 使用的模型
  metadata  String?  // 元数据 (JSON格式)
  createdAt DateTime @default(now())

  // 关联关系
  session ClaudeSession @relation(fields: [sessionId], references: [id], onDelete: Cascade)
  user    User          @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([sessionId, createdAt])
  @@index([userId, createdAt])
  @@map("claude_messages")
}

// Claude用户偏好设置表
model ClaudePreference {
  id            String   @id @default(uuid())
  userId        String
  category      String   // model, behavior, output, interaction
  key           String   // 偏好键
  value         String   // 偏好值 (JSON格式)
  description   String?  // 描述
  isSystemLevel Boolean  @default(false)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // 关联关系
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, category, key])
  @@map("claude_preferences")
} 